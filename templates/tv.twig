<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css">

    <link rel="stylesheet" href="//cdn.jsdelivr.net/pnotify/2.0.0/pnotify.all.min.css">
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

    <script src="//cdn.jsdelivr.net/pnotify/2.0.0/pnotify.all.min.js"></script>
    <style>
        .js-video {
            top: 0;
            left: 0;
            width: 100%;
            position: fixed;
        }
        .icons {
            color: #000000;
            position: absolute;
            right: 0;
            bottom: 0;
            text-align: right;
        }

    </style>
    <script src="/flash2.js"></script>
</head>
<body>
<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
<div id="player" class="js-video "></div>
<div class="icons">
    {% for sensor in sensors %}
        <button id="{{ sensor.id }}" type="button" class="sensors btn btn-primary btn-lg">
            <i class="fa {{ sensor.icon }} fa-4x"></i></button>
    {% endfor %}

</div>
<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '100%',
            width: '100%',
            videoId: '38peWm76l-U',


            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            },
            playerVars:
            {
                autoplay: 1,
                controls: 0,
                loop: 1,
                showinfo: 0
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    //var done = false;
    function onPlayerStateChange(event) {
       // if (event.data == YT.PlayerState.PLAYING && !done) {
            //setTimeout(stopVideo, 6000);
            //done = true;
        //}
    }
    function stopVideo() {
       // player.stopVideo();
    }
</script>

<script type="text/javascript">
    $( "a" ).flashNotification(
            {
                'ajax' : "{{ room.path }}"
            }
    );
    $( ".sensors").hide();

</script>
</body>
</html>